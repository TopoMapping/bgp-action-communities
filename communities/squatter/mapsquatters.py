import argparse
import pickle

# Global variables
all_ases_from_communities_set = set()
all_ases_from_communities_dict = {}
as_counter_dict = {}


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--input', dest='input', help="Pickle file generated by search siblings.", required=True)
    parser.add_argument('-o', '--output', dest='output', help="Pickle with occurrence calculated", required=True)

    # env variables
    args = parser.parse_args()
    siblings_pkl = args.input
    output = args.output

    # load the pickle structure
    with open(siblings_pkl, "rb") as file_to_process:
        siblings, as_counter_dict = pickle.load(file_to_process)

    # structure: counter, sibling dict, origins
    for key in siblings:
        for j in siblings[key][1]:
            all_ases_from_communities_set.add(j)

    # dict with all keys that have a specific ASN as target
    global_counting = {}
    for asn in all_ases_from_communities_set:
        all_ases_from_communities_dict[asn] = {}

        # get all keys that the ASN from the community appeared without the ASN in the AS-path
        for key in siblings:
            if asn in siblings[key][1]:
                local_key = key[1:]

                # associate all key with the communities related to the ASN from comm
                local_community_set = set()
                for community_key in siblings[key][3]:
                    for community in siblings[key][3][community_key]:
                        asn_comm, comm_comm = community.split(':')
                        if asn == asn_comm:
                            local_community_set.add(community)

                # without the IP from the BGP router
                all_ases_from_communities_dict[asn][local_key] = local_community_set

                # for each ASN into the key, count the global occurrence of an ASN among all keys
                for element in local_key:
                    if element in global_counting:
                        global_counting[element] += 1
                    else:
                        global_counting[element] = 1

    # get all key announcements for an ASN
    all_ases_from_communities_announces_dict = {}
    for asn in all_ases_from_communities_dict:
        # the number of occurrences of the ASN in the key
        counting = {}

        # count all occurrences for evaluate the cover of the ASNs
        for each_key in all_ases_from_communities_dict[asn]:
            for in_asn in each_key:
                if in_asn in counting:
                    counting[in_asn] += 1
                else:
                    counting[in_asn] = 1

        # siblings[asn][1][i]
        all_ases_from_communities_announces_dict[asn] = [all_ases_from_communities_dict[asn], counting]

    # Save the structures
    arq = open(output, "wb")
    # all_ases_from_communities_announces_dict = [all keys for the ASN from Community, number occur of each ASN]
    # global_counting = count the global occurrence of an ASN among all keys
    pickle.dump([all_ases_from_communities_announces_dict, global_counting], arq)

    arq.close()
